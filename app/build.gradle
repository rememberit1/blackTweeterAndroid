
apply plugin: 'com.android.application'
File keystoreProperties = rootProject.file("keystore.properties")
def props = new Properties()
if (keystoreProperties.exists()) {
    props.load(new FileInputStream(keystoreProperties))
} else {
    props['keystorefile'] = 'none';
}

android {
    packagingOptions {
        exclude 'LICENSE'
        exclude 'README.md'
        exclude 'Other/'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    exclude 'META-INF/DEPENDENCIES'
    }

    compileSdkVersion Integer.parseInt(project.TARGET_SDK)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    defaultConfig {
        def code = System.getenv("BUILD_NUMBER") as Integer ?: Integer.parseInt(project.VERSION_CODE)
        code += 264
        
        applicationId "com.blacktweeter.android.twitter"
       // minSdkVersion Integer.parseInt(project.MIN_SDK)
        minSdkVersion 21
        targetSdkVersion Integer.parseInt(project.TARGET_SDK)
        multiDexEnabled true
        versionCode code
        versionName project.VERSION_NAME

        File secretsExists = new File("secrets.properties")
        if (secretsExists.exists()) {
            def secretsFile = rootProject.file('secrets.properties')
            def secrets = new Properties()
            secrets.load(new FileInputStream(secretsFile))

            buildConfigField "String", "CONSUMER_KEY", secrets.getProperty('CONSUMER_KEY')
            buildConfigField "String", "CONSUMER_SECRET", secrets.getProperty('CONSUMER_SECRET')
            buildConfigField "String", "YOUTUBE_API_KEY", secrets.getProperty('YOUTUBE_API_KEY')
            buildConfigField "String", "TWEETMARKER_KEY", secrets.getProperty('TWEETMARKER_KEY')
            buildConfigField "String", "TWITLONGER_KEY", secrets.getProperty('TWITLONGER_KEY')
            buildConfigField "String", "TWITPIC_API_KEY", secrets.getProperty('TWITPIC_API_KEY')
            buildConfigField "String", "GIPHY_KEY", secrets.getProperty('GIPHY_KEY')
            buildConfigField "String", "ARTICLE_API_KEY", secrets.getProperty('ARTICLE_KEY')
        } else {
            buildConfigField "String", "CONSUMER_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "CONSUMER_SECRET", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "YOUTUBE_API_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "TWEETMARKER_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "TWITLONGER_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "TWITPIC_API_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "GIPHY_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "ARTICLE_API_KEY", "\"View Talon's readme to learn about inserting your keys.\""
        }
    }

    File keystore = new File(props['keystorefile'])
    if (keystore.exists()) {
        signingConfigs {
            release {
                storeFile keystore
                storePassword props['keystorepassword']
                keyAlias props['keyalias']
                keyPassword props['keypassword']
            }
        }

        buildTypes {
            release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress 'apk'
    }

    useLibrary 'org.apache.http.legacy'
}

dependencies {
    // wearApp project(':wear')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    provided 'org.projectlombok:lombok:1.14.8'
    compile "com.android.support:appcompat-v7:${project.ANDROID_SUPPORT_VERSION}"
    compile "com.android.support:customtabs:${project.ANDROID_SUPPORT_VERSION}"
    compile 'com.klinkerapps:article_viewer:0.15.6'
    compile 'com.klinkerapps:searchview:2.2.5'
    compile 'com.astuetz:pagerslidingtabstrip:1.0.1'
    compile 'com.github.castorflex.smoothprogressbar:library:0.5.1'
    compile 'de.timroes.android:EnhancedListView:0.3.2@aar'
    compile 'org.lucasr.smoothie:smoothie:0.1.0'
    compile 'com.klinkerapps:simple_videoview:1.1.2@aar'
    compile 'com.klinkerapps:launcher-apis:1.1.0@aar'
    compile 'com.google.android.apps.dashclock:dashclock-api:+'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.yalantis:ucrop:1.5.0'
    //compile 'org.twitter4j:twitter4j-core:4.0.4'
    //compile 'org.twitter4j:twitter4j-stream:4.0.4'
    compile 'org.apache.httpcomponents:httpmime:4.3.5'
    compile 'org.apache.httpcomponents:httpcore:4.3.2'
    compile 'org.jsoup:jsoup:1.7.3'
    compile files('lib/YouTubeAndroidPlayerApi.jar')
    // version 1.2.1
    compile files('lib/twitter4j-klinker24-fork.jar')
    compile files('lib/twitter4j-stream-klinker24-fork.jar')
    compile(name: 'datetimepicker', ext: 'aar')
    compile(name: 'bitmap-cache', ext: 'aar')
    compile(name: 'sectioned-recyclerview', ext: 'aar')
    compile project(':shared_assets')
    // compile project(path: ':wear')
    compile files('lib/picasso-2.5.2.jar')
    compile 'com.github.bumptech.glide:glide:4.0.0'
    compile 'com.google.firebase:firebase-core:11.8.0'
    compile 'com.google.firebase:firebase-database:11.8.0'
    compile 'com.google.firebase:firebase-messaging:11.8.0'

    compile 'com.android.support:appcompat-v7:21.0.+'
    compile 'com.android.support:cardview-v7:+'
    compile 'com.android.support:recyclerview-v7:25.1.0'
    compile 'com.android.support:support-v4:21.0.0'

    compile 'org.apache.commons:commons-lang3:3.5'


}
apply plugin: 'com.google.gms.google-services'

